cmake_minimum_required(VERSION 3.10)

project(AlibabaCloud_credential VERSION "0.1.0")
# if(POLICY CMP0079)
#     cmake_policy(SET CMP0079 NEW)
# endif()
# 用于设置构建选项，可以根据需要添加。
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 收集头文件和源文件。

file(GLOB_RECURSE headers "${CMAKE_CURRENT_SOURCE_DIR}/include/alibabacloud/provider/*.hpp")
file(GLOB_RECURSE headers "${CMAKE_CURRENT_SOURCE_DIR}/include/alibabacloud/*.hpp")
file(GLOB_RECURSE headers "${CMAKE_CURRENT_SOURCE_DIR}/include/alibabacloud/gateway/*.hpp")

file(GLOB sources "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
file(GLOB sources "${CMAKE_CURRENT_SOURCE_DIR}/src/provider/*.cpp")
# file(GLOB sources "${CMAKE_CURRENT_SOURCE_DIR}/src/gateway/*.cpp")

set_source_files_properties(${source_files} PROPERTIES LANGUAGE CXX)
# 打印调试信息
message(STATUS "Header files: ${header_files}")
message(STATUS "Source files: ${source_files}")
# 创建共享库或静态库

add_subdirectory(external)
add_library(${PROJECT_NAME} SHARED ${sources} ${headers})
# 包含头文件目录，允许文件使用相关路径。
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include)

# 链接库，对额外的库进行配置（如Boost、cpprest等）。
find_package(Boost REQUIRED COMPONENTS random system thread filesystem chrono atomic date_time regex)
# 如果你的项目需要其他的依赖库，请添加链接逻辑。
find_package(OpenSSL REQUIRED)
target_link_libraries(${PROJECT_NAME} PRIVATE OpenSSL::SSL OpenSSL::Crypto)

# 设置安装选项：库、头文件等。
install(TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
        PUBLIC_HEADER DESTINATION include/AlibabaCloud)

# install(EXPORT ${PROJECT_NAME}Targets 
#         NAMESPACE AlibabaCloud::
#         DESTINATION share/${PROJECT_NAME}/cmake)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

configure_package_config_file(
    ${CMAKE_CURRENT_LIST_DIR}/cmake/${PROJECT_NAME}Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
    INSTALL_DESTINATION share/${PROJECT_NAME}/cmake
)

install(FILES 
    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION share/${PROJECT_NAME}/cmake
)